WEBVTT

1
00:00:01.144 --> 00:00:03.727
(upbeat music)

2
00:00:05.530 --> 00:00:06.363
<v Instructor>Let's talk about</v>

3
00:00:06.363 --> 00:00:08.230
how to actually run JavaScript.

4
00:00:08.230 --> 00:00:09.787
There's a couple ways we can run JavaScript.

5
00:00:09.787 --> 00:00:10.850
We can run it in the console,

6
00:00:10.850 --> 00:00:13.290
we can run it via node, we can have a script tag,

7
00:00:13.290 --> 00:00:15.750
we can also have an external script.

8
00:00:15.750 --> 00:00:18.610
We'll talk about how we can actually run those.

9
00:00:18.610 --> 00:00:20.470
The simplest is probably just to open up

10
00:00:20.470 --> 00:00:22.230
your dev tools and to go to your console.

11
00:00:22.230 --> 00:00:25.100
And if you wanna run some JavaScript to see how it works,

12
00:00:25.100 --> 00:00:27.450
here what I've done is I've just typed one plus one,

13
00:00:27.450 --> 00:00:28.640
and it returns two.

14
00:00:28.640 --> 00:00:31.120
This is the JavaScript console.

15
00:00:31.120 --> 00:00:34.330
It's a nice way to just quickly noodle on some JavaScript.

16
00:00:34.330 --> 00:00:36.640
If you're trying to figure out how something works,

17
00:00:36.640 --> 00:00:38.350
just pop open a console.

18
00:00:38.350 --> 00:00:40.040
What's cool about that is if you are on

19
00:00:40.040 --> 00:00:42.110
like github.com or any website,

20
00:00:42.110 --> 00:00:46.080
the JavaScript that you type into your console here,

21
00:00:46.080 --> 00:00:49.670
runs on the actual page that is existing.

22
00:00:49.670 --> 00:00:52.320
I could say something like 'document.querySelectorAll',

23
00:00:54.840 --> 00:00:56.630
and select all the paragraphs on the page.

24
00:00:56.630 --> 00:00:58.350
Don't worry about what this is just yet.

25
00:00:58.350 --> 00:01:00.840
We're gonna learn how to select elements on the page.

26
00:01:00.840 --> 00:01:03.350
But that will return to us every single paragraph

27
00:01:03.350 --> 00:01:04.500
that lives on the page.

28
00:01:05.500 --> 00:01:07.470
The code that runs in your console

29
00:01:07.470 --> 00:01:11.460
is actually running in context of the page that runs here.

30
00:01:11.460 --> 00:01:14.280
You can actually change it if you were to have some

31
00:01:16.250 --> 00:01:18.250
iframes running or if you're also,

32
00:01:18.250 --> 00:01:20.670
like Chrome extensions also have their own console

33
00:01:20.670 --> 00:01:21.580
that you can run things in.

34
00:01:21.580 --> 00:01:23.140
You can change it here.

35
00:01:23.140 --> 00:01:25.850
Very rarely do I actually ever do that though.

36
00:01:25.850 --> 00:01:27.480
So, that's the console.

37
00:01:27.480 --> 00:01:30.140
Nice quick way to noodle on some JavaScript.

38
00:01:30.140 --> 00:01:32.540
Let's move into another way.

39
00:01:32.540 --> 00:01:35.320
Let's go into our playground folder and make a new file.

40
00:01:35.320 --> 00:01:39.370
We'll call that "running-js.html".

41
00:01:39.370 --> 00:01:40.450
And I'm just gonna hit...

42
00:01:40.450 --> 00:01:43.400
I have a M extension exclamation mark tab

43
00:01:43.400 --> 00:01:46.990
that will just scaffold out some HTML for us.

44
00:01:46.990 --> 00:01:50.660
And in the body here, we just have a script tag,

45
00:01:50.660 --> 00:01:53.520
and we can 'console.log', hey.

46
00:01:53.520 --> 00:01:56.830
and what this will do is when the HTML is loaded,

47
00:01:56.830 --> 00:01:59.290
it's going to say, Oh, this is a script tag.

48
00:01:59.290 --> 00:02:03.490
I am changing languages from HTML over to JavaScript.

49
00:02:03.490 --> 00:02:06.310
And it's gonna run any code that is inside of the open

50
00:02:06.310 --> 00:02:09.200
in this closing script tag as JavaScript.

51
00:02:09.200 --> 00:02:12.023
So if I were to go ahead and open this up in my browser,

52
00:02:13.450 --> 00:02:17.530
and I open up my console here, you see that it says,

53
00:02:17.530 --> 00:02:19.090
hey, is console dot logged.

54
00:02:19.090 --> 00:02:21.070
We'll understand what console log is, again,

55
00:02:21.070 --> 00:02:22.880
just don't sweat this too much.

56
00:02:22.880 --> 00:02:24.570
We will be going over it.

57
00:02:24.570 --> 00:02:27.880
And then there is, it shows us that it's running on line 12.

58
00:02:27.880 --> 00:02:29.180
Pretty simple stuff.

59
00:02:29.180 --> 00:02:33.070
One thing I do want to say is that it's worth

60
00:02:33.070 --> 00:02:36.940
almost always running your scripts at the end of the,

61
00:02:36.940 --> 00:02:39.040
just before the closing body tag.

62
00:02:39.040 --> 00:02:41.960
So if I were to go here and have a paragraph tag that says,

63
00:02:41.960 --> 00:02:46.480
hey, and I were to try to select that element,

64
00:02:46.480 --> 00:02:49.700
so 'const paragraph' is equal to

65
00:02:49.700 --> 00:02:52.586
'document dot querySelector'.

66
00:02:52.586 --> 00:02:54.080
And we'll select the paragraph

67
00:02:54.080 --> 00:02:56.203
and then 'console.log' the paragraph.

68
00:02:57.130 --> 00:02:58.150
And when I refresh this,

69
00:02:58.150 --> 00:03:01.100
you see that we actually get that paragraph element.

70
00:03:01.100 --> 00:03:04.840
Now if I were to put that script tag above the paragraphs

71
00:03:04.840 --> 00:03:07.590
or I put the paragraph below the script tag,

72
00:03:07.590 --> 00:03:09.210
and I were to just refresh that page,

73
00:03:09.210 --> 00:03:13.780
you see that we get 'null' which means that it found nothing.

74
00:03:13.780 --> 00:03:17.550
And that's because, in order for your script tag

75
00:03:17.550 --> 00:03:20.510
to access the elements on the page,

76
00:03:20.510 --> 00:03:22.460
the elements must first be on the page

77
00:03:22.460 --> 00:03:23.350
before you select them.

78
00:03:23.350 --> 00:03:26.550
So if we try to select something that doesn't yet exist,

79
00:03:26.550 --> 00:03:28.650
'cause it gets created later,

80
00:03:28.650 --> 00:03:30.780
then we won't have access to it.

81
00:03:30.780 --> 00:03:33.090
So, I'll talk about a couple different options

82
00:03:33.090 --> 00:03:37.240
in just a second, but just for your own sanity's sake,

83
00:03:37.240 --> 00:03:39.340
just always put your JavaScript

84
00:03:39.340 --> 00:03:41.550
right before the closing body tag

85
00:03:41.550 --> 00:03:45.180
and that's going to help you a whole lot.

86
00:03:45.180 --> 00:03:47.960
We'll talk a little bit more about loading and, and whatnot,

87
00:03:47.960 --> 00:03:49.410
in some future videos when we get

88
00:03:49.410 --> 00:03:51.420
a little bit more into the DOM,

89
00:03:51.420 --> 00:03:54.163
and that will be how we can run it.

90
00:03:55.240 --> 00:03:57.600
Another way that we can do is

91
00:03:57.600 --> 00:04:00.230
via a external JavaScript file.

92
00:04:00.230 --> 00:04:02.420
So if I were to go into my playground

93
00:04:02.420 --> 00:04:07.240
and make a 'some dot JS', and this is a dot JS file,

94
00:04:07.240 --> 00:04:12.240
and in here 'console dot log', I'm in another file,

95
00:04:14.510 --> 00:04:19.473
And I can go in here now and give myself a script tag

96
00:04:20.330 --> 00:04:22.620
with a source attribute.

97
00:04:22.620 --> 00:04:27.170
You do not need a type attribute until we hit modules.

98
00:04:27.170 --> 00:04:30.220
So sometimes you may see like a type is equal to,

99
00:04:30.220 --> 00:04:33.380
I don't know, like "text forward slash JavaScript" in there.

100
00:04:33.380 --> 00:04:36.480
That's not necessary unless we're actually doing modules.

101
00:04:36.480 --> 00:04:40.040
So you can omit that, you simply just need the source.

102
00:04:40.040 --> 00:04:42.780
And then you need to give it a relative path.

103
00:04:42.780 --> 00:04:46.760
So 'dot forward slash', and then give it 'some dot JS'.

104
00:04:46.760 --> 00:04:50.370
Because the HTML file is in a folder

105
00:04:50.370 --> 00:04:52.760
where the sibling is 'some dot JS'.

106
00:04:52.760 --> 00:04:56.080
So 'dot forward slash' means in this folder,

107
00:04:56.080 --> 00:04:59.200
if I were to do 'dot dot', that would mean go up a level

108
00:05:00.050 --> 00:05:01.900
In our case, it's in the same folder,

109
00:05:01.900 --> 00:05:04.870
and then we give it a relative path

110
00:05:04.870 --> 00:05:06.900
to the JavaScript that's running.

111
00:05:06.900 --> 00:05:09.420
Now if I were to rerun that it says I'm in another file.

112
00:05:09.420 --> 00:05:12.540
It actually shows us where the JavaScript had been run.

113
00:05:12.540 --> 00:05:14.080
And if you click that,

114
00:05:14.080 --> 00:05:15.770
it will show us the actual JavaScript.

115
00:05:15.770 --> 00:05:18.823
We'll go more into this when we hit debugging.

116
00:05:20.950 --> 00:05:23.630
Again, if you were to put the script,

117
00:05:23.630 --> 00:05:25.270
I know sometimes you think,

118
00:05:25.270 --> 00:05:27.780
especially like WordPress plugins love to do this.

119
00:05:27.780 --> 00:05:32.590
If you put the script tag in the head, it will still work.

120
00:05:32.590 --> 00:05:34.930
You see, it still says I'm in another file,

121
00:05:34.930 --> 00:05:37.970
but if we were to try to select some things on the page,

122
00:05:37.970 --> 00:05:42.970
so 'const p' is equal to 'document dot querySelector'.

123
00:05:45.410 --> 00:05:47.230
Now when I refresh it, you see we have 'null'.

124
00:05:47.230 --> 00:05:51.400
Why, because of the same reason, the script will run

125
00:05:51.400 --> 00:05:55.600
before the actual HTML is finished building on the page.

126
00:05:55.600 --> 00:05:56.870
Now there are some options.

127
00:05:56.870 --> 00:06:00.170
There are 'async' and a 'defer' attributes

128
00:06:00.170 --> 00:06:01.730
that you can add to your script tag

129
00:06:01.730 --> 00:06:06.730
that will delay the actual running of the JavaScript,

130
00:06:07.040 --> 00:06:11.820
it will download it synchronously and then run it

131
00:06:11.820 --> 00:06:14.610
once the HTML has been loaded on the page.

132
00:06:14.610 --> 00:06:16.100
But that's a much more advanced topic

133
00:06:16.100 --> 00:06:19.020
that we'll get into when we hit 'async'.

134
00:06:19.020 --> 00:06:21.420
We really have to understand what does asynchronous mean

135
00:06:21.420 --> 00:06:22.450
and all of this stuff.

136
00:06:22.450 --> 00:06:24.920
So it's too deep to get into right now.

137
00:06:24.920 --> 00:06:26.680
So we're just going to leave it at that.

138
00:06:26.680 --> 00:06:28.320
Again, put your script tag

139
00:06:28.320 --> 00:06:30.350
right before your closing body tag,

140
00:06:30.350 --> 00:06:32.680
and that's going to give you the best performance

141
00:06:32.680 --> 00:06:36.080
on your website, as well as make sure

142
00:06:36.080 --> 00:06:38.140
that you don't have any headaches that you hit.

143
00:06:38.140 --> 00:06:41.680
Another thing is you might be noticing like "What is this?"

144
00:06:41.680 --> 00:06:43.100
Why is there a closing script tag

145
00:06:43.100 --> 00:06:45.930
if there's nothing inside of here?

146
00:06:45.930 --> 00:06:48.320
That's just a quirk with the script tag.

147
00:06:48.320 --> 00:06:52.040
You cannot self close it like you could many other elements,

148
00:06:52.040 --> 00:06:54.780
like an image tag or an input or something like that.

149
00:06:54.780 --> 00:06:57.257
You do have to have the opening and closing tag

150
00:06:57.257 --> 00:06:58.570
and you cannot put...

151
00:06:58.570 --> 00:07:01.870
Sometimes I see people say 'console dot log', hey.

152
00:07:01.870 --> 00:07:04.370
I don't think this will work, will it?

153
00:07:04.370 --> 00:07:05.860
No, it doesn't work.
Why?

154
00:07:05.860 --> 00:07:10.410
Because if there is a source attribute on your script tag,

155
00:07:10.410 --> 00:07:12.370
it will actually download and run that JavaScript

156
00:07:12.370 --> 00:07:14.870
and it will ignore any children

157
00:07:14.870 --> 00:07:17.160
that are inside of your actual script tag.

158
00:07:17.160 --> 00:07:19.640
If we take that source attribute off,

159
00:07:19.640 --> 00:07:22.330
then it just reverts back to a regular script tag,

160
00:07:22.330 --> 00:07:24.370
but that's not what we want in our case.

161
00:07:24.370 --> 00:07:28.650
You can have multiple script tags, if you like.

162
00:07:28.650 --> 00:07:31.310
The only downside to that is every single time

163
00:07:31.310 --> 00:07:34.000
that it hits one of these is gonna go off and download it

164
00:07:34.000 --> 00:07:36.120
and parse it for you.

165
00:07:36.120 --> 00:07:38.780
So when we hit modules, we'll look at how can we actually

166
00:07:38.780 --> 00:07:42.080
bundle that into one JavaScript file,

167
00:07:42.080 --> 00:07:44.050
or you can do what's called code splitting,

168
00:07:44.050 --> 00:07:47.360
which is split them into multiple smaller JavaScript files

169
00:07:47.360 --> 00:07:49.033
and have them load on demand.

170
00:07:50.396 --> 00:07:51.830
I believe that's it for running...

171
00:07:51.830 --> 00:07:54.360
Oh, no one more that we have is actually

172
00:07:54.360 --> 00:07:56.070
running it in Node JS.

173
00:07:56.070 --> 00:08:00.610
So if I were to make another file

174
00:08:00.610 --> 00:08:05.610
and we'll call that "node dash example dot JS".

175
00:08:05.740 --> 00:08:10.475
And here I'll just say 'console dot log IM from node'.

176
00:08:10.475 --> 00:08:14.410
Node JS is JavaScript that can run from the console,

177
00:08:14.410 --> 00:08:16.010
JavaScript that can run in the server.

178
00:08:16.010 --> 00:08:17.470
So instead of running JavaScript

179
00:08:17.470 --> 00:08:18.950
in the context of a website,

180
00:08:18.950 --> 00:08:22.100
we've run it on an actual machine

181
00:08:22.100 --> 00:08:24.290
like many other programming languages do.

182
00:08:24.290 --> 00:08:26.890
And a way that you can do that is you can go here,

183
00:08:26.890 --> 00:08:28.530
and let me see what we got here.

184
00:08:28.530 --> 00:08:31.540
I'm going to go into the playground file

185
00:08:31.540 --> 00:08:32.923
and then we'll see here.

186
00:08:36.140 --> 00:08:37.780
Running JS node example.

187
00:08:37.780 --> 00:08:38.880
So I can run...

188
00:08:38.880 --> 00:08:40.790
We already talked about how you can run node

189
00:08:40.790 --> 00:08:42.240
and then you get a console here,

190
00:08:42.240 --> 00:08:44.850
but you can also just run scripts of JavaScript.

191
00:08:44.850 --> 00:08:48.210
So node, node example dot JS,

192
00:08:48.210 --> 00:08:49.830
and you'll see that that will just run

193
00:08:49.830 --> 00:08:53.470
whatever code is in here and then when it's finished,

194
00:08:53.470 --> 00:08:56.150
it will exit and kick you back to your command prompt there.

195
00:08:56.150 --> 00:08:57.630
So that's the short and skinny of

196
00:08:57.630 --> 00:08:58.710
how to load JavaScript.

197
00:08:58.710 --> 00:09:01.810
We're going to use sort of combination of

198
00:09:01.810 --> 00:09:05.080
running in the console, running in just script tags

199
00:09:05.080 --> 00:09:08.310
and running in external JavaScript files.

200
00:09:08.310 --> 00:09:12.170
Probably for most of your actual production applications,

201
00:09:12.170 --> 00:09:15.550
you are going to be writing in separate JS files,

202
00:09:15.550 --> 00:09:18.700
and likely even in what's called JavaScript modules,

203
00:09:18.700 --> 00:09:22.937
which we're going to get into very later on in this course.

